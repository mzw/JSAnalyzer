<?xml version="1.0" encoding="UTF-8"?>
<Rules>
	<Functions>
		<!--
		In case of get/post(URL, callback), change callback="arg_1"
		In case of get/post(URL, data, callback), change callback="arg_2"

		-->
		<Function interact="Server" func="get"  target="jQuery" event="get" callback="arg_2" repeatable="false" />
		<Function interact="Server" func="post" target="jQuery" event="post" callback="arg_2" repeatable="false" />
		
		
		<!--
		<Function interact="Server" func="getJSON"   target="jQuery" event="getJSON" callback="arg_2" />
		<Function interact="Server" func="getScript" target="jQuery" event="getScript" callback="arg_2" />
		-->
		
		
        <Function interact="User" func="bind" target="PropTarget" event="arg_0" callback="arg_1"/>
		
		<!-- The followings are not actually potential functions, but handle virtually callback mechanism -->
		<Function func="each" target="jQuery" callback="arg_1" /><!-- Change callback="arg_0" depending on your apps -->
		
		
	
		<Function interact="User" via="mouse" func="on" target="PropTarget" event="arg_0" callback="arg_1"/>
        <!--<Function interact="User" via="mouse" func="bind" target="PropTarget" event="arg_0" callback="arg_1"/>-->

        <!-- mouse events -->
		<Function interact="User" via="mouse" func="click" target="PropTarget" event="click" callback="arg_0"/>
		<Function interact="User" via="mouse" func="dblclick" target="PropTarget" event="double click" callback="arg_0"/>
		<Function interact="User" via="mouse" func="hover" target="PropTarget" event="hover" callback="arg_0"/>
		<Function interact="User" via="mouse" func="mousedown" target="PropTarget" event="mouse down" callback="arg_0"/>
		<Function interact="User" via="mouse" func="mouseenter" target="PropTarget" event="mouse enter" callback="arg_0"/>
		<Function interact="User" via="mouse" func="mouseleave" target="PropTarget" event="mouse leave" callback="arg_0"/>
		<Function interact="User" via="mouse" func="mousemove" target="PropTarget" event="mouse move" callback="arg_0"/>
		<Function interact="User" via="mouse" func="mouseover" target="PropTarget" event="mouse over" callback="arg_0"/>
		<Function interact="User" via="mouse" func="mouseup" target="PropTarget" event="mouse up" callback="arg_0"/>
		<Function interact="User" via="mouse" func="focusin" target="PropTarget" event="focus in" callback="arg_0"/>
		<!-- Limitation due to the same reason as pseudo classes in CSS
			<Function interact="User" func="toggle" target="PropTarget" event="toggle" callback="arg_N"/>
		-->
		<!-- keyboard events -->
		<Function interact="User" via="keyboard" func="keydown" target="PropTarget" event="key down" callback="arg_0"/>
		<Function interact="User" via="keyboard" func="keypress" target="PropTarget" event="key press" callback="arg_0"/>
		<Function interact="User" via="keyboard" func="keyup" target="PropTarget" event="key up" callback="arg_0"/>
		<!-- mouse and keyboard events -->
		<Function interact="User" via="mouse_keyboard" func="focusin" target="PropTarget" event="focus in" callback="arg_0"/>
		<Function interact="User" via="mouse_keyboard" func="focusout" target="PropTarget" event="focus out" callback="arg_0"/>
		<!-- form events -->
		<Function interact="User" via="form" func="blur" target="PropTarget" event="blur" callback="arg_0"/>
		<Function interact="User" via="form" func="change" target="PropTarget" event="change" callback="arg_0"/>
		<Function interact="User" via="form" func="focus" target="PropTarget" event="focus" callback="arg_0"/>
		<Function interact="User" via="form" func="focusin" target="PropTarget" event="focusin" callback="arg_0"/>
		<Function interact="User" via="form" func="select" target="PropTarget" event="select" callback="arg_0"/>
		<Function interact="User" via="form" func="submit" target="PropTarget" event="submit" callback="arg_0" />
		<!-- document loading events -->
		<Function interact="Self" via="window" func="load" target="jQuery" event="load" callback="arg_0"/> <!-- img? --> <!-- server event?? --> <!-- *1) 第1引数が関数ならば？ -->
		<Function interact="Self" via="document" func="ready" target="jQuery" event="ready" callback="arg_0" repeatable="false" />
		<Function interact="Self" via="window" func="unload" target="jQuery" event="unload" callback="arg_0"/>
		<!-- Browser events -->
		<Function interact="Self" via="browser" func="error" target="PropTarget" event="error" callback="arg_0"/>
		<Function interact="Self" via="browser" func="resize" target="PropTarget" event="resize" callback="arg_0"/>
		<Function interact="Self" via="browser" func="scroll" target="PropTarget" event="scroll" callback="arg_0"/>
		
		<!-- Global Ajax -->
		<Function interact="Server" via="XMLHttpRequest" func="ajaxComplete" target="$(document)" event="ajax complete" callback="arg_0"/>
		<Function interact="Server" via="XMLHttpRequest" func="ajaxError" target="$(document)" event="ajax error" callback="arg_0"/>
		<Function interact="Server" via="XMLHttpRequest" func="ajaxSend" target="$(document)" event="ajax send" callback="arg_0"/>
		<Function interact="Server" via="XMLHttpRequest" func="ajaxStart" target="$(document)" event="ajax start" callback="arg_0"/>
		<Function interact="Server" via="XMLHttpRequest" func="ajaxStop" target="$(document)" event="ajax stop" callback="arg_0"/>
		<Function interact="Server" via="XMLHttpRequest" func="ajaxSuccess" target="$(document)" event="ajax success" callback="arg_0"/>
		<!-- Helper functions: param, serialize, serializeArray は単なる処理なので対象外 -->
		<!-- Low-level interfaces -->
		<Function interact="Server" via="XMLHttpRequest" func="ajax" target="$" event="ajax" callback="prop" unimplemented="true" />
		<Function interact="Server" via="XMLHttpRequest" func="ajaxPrefilter" target="$" event="ajax" callback="prop" unimplemented="true" />
		<Function interact="Server" via="XMLHttpRequest" func="ajaxSetup" target="$" event="ajax" callback="prop" unimplemented="true" />
		<Function interact="Server" via="XMLHttpRequest" func="ajaxTransport" target="$" event="ajax" callback="prop" unimplemented="true" />
		<!-- shorthand -->
		<!--
		-- "success" is defined at the trigger rule
		<Function interact="Server" via="XMLHttpRequest" func="get" target="$" event="success" callback="arg_1||3" />
		<Function interact="Server" via="XMLHttpRequest" func="getJSON" target="$" event="success" callback="arg_1||3" />
		<Function interact="Server" via="XMLHttpRequest" func="getScript" target="$" event="success" callback="arg_1||3" />
		<Function interact="Server" via="XMLHttpRequest" func="post" target="$" event="success" callback="arg_1||3" />
		-->
		<Function interact="Server" via="XMLHttpRequest" func="load" target="PropTarget" event="complete" callback="arg_1||3" /> <!-- *1) 第2or3引数が関数ならば？ -->
	</Functions>
	
	
	
	
	
	
	
	<Controls>
	<!--
	All <prop> and <value> is replaced by "prop" and "value", then evaluate "cond".
	If the evaluation result is false, AST element which matchs by "func" is skipped.
	Note that "disabled" is also evaluated, not deal it as raw string.
	 -->
		<Control func="attr" prop="arg_0" value="arg_1" cond="<prop>=='disabled'" disabled="<value>=='disabled'" />
		<Control lang="js" func="removeAttr" target="PropTarget" prop="arg_0" cond="<prop>=='disabled'" disabled="false" semantic="set" />
		
		<!-- Manipulation -->
		<!--
		-->
		<Control lang="js" func="prependTo" target="PropTarget" prop="arg_0" cond="true" disabled="false" semantic="append" />
		<Control lang="js" func="remove" target="PropTarget" prop="arg_0" cond="true" disabled="true" semantic="remove" />
		
		<!-- Effects -->
		<Control lang="js" func="show" target="PropTarget" prop="arg_0" cond="true" disabled="false" semantic="set" />
		<Control lang="js" func="hide" target="PropTarget" prop="arg_0" cond="true" disabled="true" semantic="set" />
		
		
		<!-- visibility -->
		<!--
		<Control lang="css" sector="hidden" unimplemented="true" />
		<Control lang="css" sector="visible" unimplemented="true" />
		-->
	</Controls>
	
	
	
	
	
	
	
	
	<Manipulates>
		<Manipulate func="$" semantic="get" by="CSSQuery" value="arg_0" target="Return" />
		
		<!-- Class -->
		<Manipulate func="addClass" semantic="add" by="class" value="arg_0" target="PropTarget" />
		<Manipulate func="removeClass" semantic="remove" by="class" value="arg_0" target="PropTarget" />
		<!-- 
			<Manipulate func="hasClass" semantic="??" by="class" value="arg_0" target="PropTarget" /> <!-- 値に変化なしなので、スコープ外 -->
			<Manipulate func="toggleClass" semantic="??" by="class" value="arg_0" target="PropTarget" /> <!-- 意味的で解析困難だが代用可能なので、スコープ外 -->
		-->
		<!-- Copyrightのclone()はどうしよう。。。 -->
		<!-- General attributes -->
		<!--<Manipulate func="attr" semantic="set" by="arg_0" value="arg_1" target="PropTarget" />--><!-- 属性値の取得もできるが、データフローなのでスコープ外 -->
		
		<!-- Insertion -->
		<!--<Manipulate func="append" semantic="insert" by="arg_0" value="arg_1" target="PropTarget" />-->
	</Manipulates>
</Rules>
